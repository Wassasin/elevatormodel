MODULE elevator
	VAR
		cabin_at : 0..3;
		target : -1..3;
	ASSIGN
		init(cabin_at) := 0;
		init(target) := -1;
	DEFINE
		has_target := target != -1;
		met_target := cabin_at = target;
		may_change_target := met_target | !has_target;
		
MODULE user()
	VAR
		state : {idle, request, in_elevator};
		wants_to : 0..3;
		user_at : 0..3;
	ASSIGN
		init(wants_to) := 0..3;
		init(user_at) := 0..3;
		init(state) := idle;
		next(wants_to) := case
-- is _NOT_ part of the assignment
--			wants_to = user_at & state = idle : 0..3;
			TRUE : wants_to;
		esac;

MODULE floor(i)
	VAR
		door_open : boolean;
	ASSIGN
		init(door_open) := FALSE;
	DEFINE
		floor := i;

MODULE controller
	VAR
		e : elevator;
		u0 : user();
		u1 : user();
		f0 : floor(0);
		f1 : floor(1);
		f2 : floor(2);
		f3 : floor(3);
	ASSIGN


		next(f0.door_open) := case
			f0.floor = e.target & e.met_target : TRUE;
			TRUE : FALSE;
		esac;

		next(f1.door_open) := case
			f1.floor = e.target & e.met_target : TRUE;
			TRUE : FALSE;
		esac;

		next(f2.door_open) := case
			f2.floor = e.target & e.met_target : TRUE;
			TRUE : FALSE;
		esac;

		next(f3.door_open) := case
			f3.floor = e.target & e.met_target : TRUE;
			TRUE : FALSE;
		esac;
		
		next(e.cabin_at) := case
			may_move & e.has_target & e.target < e.cabin_at : e.cabin_at - 1;
			may_move & e.has_target & e.target > e.cabin_at : e.cabin_at + 1;
			TRUE : e.cabin_at;
		esac;
		
		next(e.target) := case
			e.may_change_target & u0.state = in_elevator : u0.wants_to;
			e.may_change_target & u1.state = in_elevator : u1.wants_to;
			e.may_change_target & cabin_empty & u0.state = request : u0.user_at;
			e.may_change_target & cabin_empty & u1.state = request : u1.user_at;
			e.may_change_target & cabin_empty & no_requests & e.cabin_at != 0 : 0;
			e.may_change_target & cabin_empty & no_requests & e.cabin_at = 0 : -1;
			TRUE : e.target;
		esac;


		next(u0.state) := case
			u0.state = request & u0_door_open : in_elevator;
			u0.state = in_elevator & u0.wants_to = u0.user_at & u0_door_open : idle;
			u0.state = idle & u0.user_at != u0.wants_to : request;
			TRUE : u0.state;
		esac;

		next(u1.state) := case
			u1.state = request & u1_door_open : in_elevator;
			u1.state = in_elevator & u1.wants_to = u1.user_at & u1_door_open : idle;
			u1.state = idle & u1.user_at != u1.wants_to : request;
			TRUE : u1.state;
		esac;


		next(u0.user_at) := case
			u0.state = in_elevator : e.cabin_at;
			TRUE : u0.user_at;
		esac;

		next(u1.user_at) := case
			u1.state = in_elevator : e.cabin_at;
			TRUE : u1.user_at;
		esac;

	DEFINE
		may_move := (
			(f0.floor = e.cabin_at -> !f0.door_open) &
			(f1.floor = e.cabin_at -> !f1.door_open) &
			(f2.floor = e.cabin_at -> !f2.door_open) &
			(f3.floor = e.cabin_at -> !f3.door_open)
		);
		
		cabin_empty := (
			u0.state != in_elevator &
			u1.state != in_elevator
		);
		
		no_requests := (
			u0.state != request &
			u1.state != request
		);
		
		u0_door_open := (
			(u0.user_at = f0.floor -> f0.door_open) &
			(u0.user_at = f1.floor -> f1.door_open) &
			(u0.user_at = f2.floor -> f2.door_open) &
			(u0.user_at = f3.floor -> f3.door_open)
		);
		u1_door_open := (
			(u1.user_at = f0.floor -> f0.door_open) &
			(u1.user_at = f1.floor -> f1.door_open) &
			(u1.user_at = f2.floor -> f2.door_open) &
			(u1.user_at = f3.floor -> f3.door_open)
		);

MODULE main
	VAR
		c : controller;
		-- The doors are safe
		LTLSPEC G !(c.f0.door_open & c.e.cabin_at != 0)
		LTLSPEC G !(c.f1.door_open & c.e.cabin_at != 1)
		LTLSPEC G !(c.f2.door_open & c.e.cabin_at != 2)
		LTLSPEC G !(c.f3.door_open & c.e.cabin_at != 3)
		-- A requested floor will be served sometime.
		LTLSPEC G ((c.u0.state = request & c.u0.wants_to = 0) -> F (c.e.cabin_at = 0 & c.f0.door_open))
		LTLSPEC G ((c.u0.state = request & c.u0.wants_to = 1) -> F (c.e.cabin_at = 1 & c.f1.door_open))
		LTLSPEC G ((c.u0.state = request & c.u0.wants_to = 2) -> F (c.e.cabin_at = 2 & c.f2.door_open))
		LTLSPEC G ((c.u0.state = request & c.u0.wants_to = 3) -> F (c.e.cabin_at = 3 & c.f3.door_open))
		LTLSPEC G ((c.u1.state = request & c.u1.wants_to = 0) -> F (c.e.cabin_at = 0 & c.f0.door_open))
		LTLSPEC G ((c.u1.state = request & c.u1.wants_to = 1) -> F (c.e.cabin_at = 1 & c.f1.door_open))
		LTLSPEC G ((c.u1.state = request & c.u1.wants_to = 2) -> F (c.e.cabin_at = 2 & c.f2.door_open))
		LTLSPEC G ((c.u1.state = request & c.u1.wants_to = 3) -> F (c.e.cabin_at = 3 & c.f3.door_open))
		-- Again and again the elevator returns to floor 0.
		LTLSPEC G F c.e.cabin_at = 0
		-- Law of nature.
		LTLSPEC G c.e.cabin_at = 0 -> X (c.e.cabin_at = 0 | c.e.cabin_at = 1)
		LTLSPEC G c.e.cabin_at = 1 -> X (c.e.cabin_at = 0 | c.e.cabin_at = 1 | c.e.cabin_at = 2)
		LTLSPEC G c.e.cabin_at = 2 -> X (c.e.cabin_at = 1 | c.e.cabin_at = 2 | c.e.cabin_at = 3)
		LTLSPEC G c.e.cabin_at = 3 -> X (c.e.cabin_at = 2 | c.e.cabin_at = 3)
		-- You can't get stuck inside.
		LTLSPEC G c.u0.state = in_elevator -> F c.u0.state = idle
		LTLSPEC G c.u1.state = in_elevator -> F c.u1.state = idle
		-- The doors will eventually close
		LTLSPEC G c.f0.door_open -> F !c.f0.door_open
		LTLSPEC G c.f1.door_open -> F !c.f1.door_open
		LTLSPEC G c.f2.door_open -> F !c.f2.door_open
		LTLSPEC G c.f3.door_open -> F !c.f3.door_open
		-- An occupant has requested the elevator previously
		LTLSPEC G c.u0.state = in_elevator -> O c.u0.state = request
		LTLSPEC G c.u1.state = in_elevator -> O c.u1.state = request
