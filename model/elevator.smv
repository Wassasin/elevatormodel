MODULE elevator
 VAR
  cabin_at : 0..3;
  door_open : boolean;
 ASSIGN
  init(cabin_at) := 0;
  init(door_open) := FALSE;

MODULE user(init_floor)
 VAR
  state : {idle, request, in_elevator};
  wants_to : 0..3;
  floor : 0..3;
 ASSIGN
  init(floor) := init_floor;
  init(state) := idle;
  next(wants_to) := case
                     wants_to = floor : 0..3;
					 TRUE : wants_to;
				   esac;

MODULE controller
 VAR
  e : elevator;
  u0 : user(0);
  u1 : user(1);
  u2 : user(2);
 ASSIGN
  next(e.cabin_at) := case  --ophalen
							u0.state = request & u0.floor < e.cabin_at : e.cabin_at - 1;
							u0.state = request & u0.floor > e.cabin_at : e.cabin_at + 1;
                            u1.state = request & u1.floor < e.cabin_at : e.cabin_at - 1;
							u1.state = request & u1.floor > e.cabin_at : e.cabin_at + 1;
							u2.state = request & u2.floor < e.cabin_at : e.cabin_at - 1;
							u2.state = request & u2.floor > e.cabin_at : e.cabin_at + 1;
							--wegbrengen
							u0.state = in_elevator & u0.wants_to < e.cabin_at : e.cabin_at - 1;
							u0.state = in_elevator & u0.wants_to > e.cabin_at : e.cabin_at + 1;
							u1.state = in_elevator & u1.wants_to < e.cabin_at : e.cabin_at - 1;
							u1.state = in_elevator & u1.wants_to > e.cabin_at : e.cabin_at + 1;
							u2.state = in_elevator & u2.wants_to < e.cabin_at : e.cabin_at - 1;
							u2.state = in_elevator & u2.wants_to > e.cabin_at : e.cabin_at + 1;
							TRUE : e.cabin_at;
						   esac;
  next(e.door_open) := case
                        e.door_open & ((u0.floor = e.cabin_at & u0.state != request) | (u1.floor = e.cabin_at & u1.state != request) | (u2.floor = e.cabin_at & u2.state != request)) : FALSE;
						--!e.door_open & 
						TRUE : e.door_open;
					   esac;
  next(u0.state) := case
                  u0.state = request & e.door_open & e.cabin_at = u0.floor : idle;
                  u0.state = idle : {idle, request};
				  TRUE : u0.state;
				 esac;
  next(u0.floor) := case
                       u0.wants_to = e.cabin_at & e.door_open : e.cabin_at;
					   TRUE : u0.floor;
					  esac;
					  
MODULE main
 VAR
  c : controller;
 LTLSPEC G F c.e.cabin_at = 0
